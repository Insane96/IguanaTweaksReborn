plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle' version '[6.0.18,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

version = "${mod_version}-mc${mc_version}"
group = 'insane96mcp.iguanatweaksreborn'

base {
    archivesName = 'IguanaTweaksReborn'
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/NeoForged/NeoForm/blob/main/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://parchmentmc.org/docs/getting-started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'parchment', version: "${parchment_version}-${mc_version}"

    // When true, this property will have all Eclipse/IntelliJ IDEA run configurations run the "prepareX" task for the given run configuration before launching the game.
    // In most cases, it is not necessary to enable.
    // enableEclipsePrepareRuns = true
    // enableIdeaPrepareRuns = true

    // This property allows configuring Gradle's ProcessResources task(s) to run on IDE output locations before launching the game.
    // It is REQUIRED to be set to true for this template to function.
    // See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
    copyIdeResources = true

    // When true, this property will add the folder name of all declared run configurations to generated IDE run configurations.
    // The folder name can be set on a run configuration using the "folderName" property.
    // By default, the folder name of a run configuration is the name of the Gradle project containing it.
    // generateRunFolders = true

    // This property enables access transformers for use in development.
    // They will be applied to the Minecraft artifact.
    // The access transformer file can be anywhere in the project.
    // However, it must be at "META-INF/accesstransformer.cfg" in the final mod jar to be loaded by Forge.
    // This default location is a best practice to automatically put the file in the right place in the final jar.
    // See https://docs.neoforged.net/docs/1.20.x/advanced/accesstransformers/ for more information.

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        // applies to all the run configs below
        configureEach {

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            args '-mixin.config=iguanatweaksreborn.mixins.json'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            workingDirectory project.file('run')
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            // property 'forge.enabledGameTestNamespaces', mod_id
            property 'mixin.debug.export', 'true'
        }
        client2 {
            workingDirectory project.file('run-2')
            args "--username", "Dev2"
        }

        server {
            workingDirectory project.file('run-server')
            // property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        data {
            // example of overriding the workingDirectory set in configureEach above
            workingDirectory project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

mixin {
    add sourceSets.main, "iguanatweaksreborn.refmap.json"
}

repositories {
    flatDir {
        dir 'libs'
    }
    maven {
        name = "CurseMaven"
        url = "https://www.cursemaven.com/"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        url 'https://www.dogforce-games.com/maven/'
        content {
            // Needed otherwise gradle goes crazy by downloading all the dependencies from here (failing)
            includeGroup "dev.gigaherz.sewingkit"
        }
    }
    maven {
        url = "https://jitpack.io"
        content {
            // Needed otherwise gradle goes crazy by downloading all the dependencies from here (failing)
            includeGroup "com.github.Virtuoel"
        }
    }
    maven { url 'https://maven.blamejared.com' }
}

configurations {
    shade
    implementation.extendsFrom shade
}

dependencies {
    minecraft "net.neoforged:forge:${mc_version}-${neo_version}"

    implementation fg.deobf("blank:InsaneLib:${lib_version}-mc${mc_version}")
    //runtimeOnly fg.deobf("blank:MobsPropertiesRandomness:${mpr_version}-mc${mc_version}")
    //implementation fg.deobf("blank:Shields+:${shields_plus_version}-mc${mc_version}")
    //implementation fg.deobf("blank:EnhancedAI:${enhancedai_version}-mc${mc_version}")

    runtimeOnly fg.deobf("curse.maven:selene-499980:5201144")
    runtimeOnly fg.deobf("curse.maven:mmmmmmmmmmmm-225738:5051316")
    runtimeOnly fg.deobf("curse.maven:better-advancements-272515:4631253")
    runtimeOnly fg.deobf("curse.maven:worldedit-225608:4586218")
    runtimeOnly fg.deobf("curse.maven:supplementaries-412082:5211386")

    implementation fg.deobf("com.github.glitchfiend:SereneSeasons:${mc_version}-${sereneseasons_version}")

    //implementation fg.deobf("com.github.Virtuoel:Pehkui:${pehkui_version}-${mc_version}-forge")
    //implementation fg.deobf("curse.maven:kiwi-303657:4592974")
    //implementation fg.deobf("curse.maven:passable-foliage-379887:4593677")
    implementation fg.deobf("curse.maven:tool-belt-260262:4581167")
    //Needed for data gen, Hardcoded MC version as there is no 1.20.1 version
    runtimeOnly fg.deobf("dev.gigaherz.sewingkit:SewingKit-1.20:1.8.0")

    runtimeOnly fg.deobf("net.darkhax.maxhealthfix:MaxHealthFix-Forge-${mc_version}:${max_health_fix_version}")

    //runtimeOnly fg.deobf("curse.maven:corail-woodcutter-331983:4685515")

    //implementation fg.deobf("curse.maven:puzzles-lib-495476:4660882")
    //runtimeOnly fg.deobf("curse.maven:easy-magic-456239:4658750")

    minecraftLibrary 'com.ezylang:EvalEx:3.0.2'
    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"

    shade 'com.ezylang:EvalEx:3.0.2'

    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.3.5"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:0.3.5")) {
        jarJar.ranged(it, "[0.3.5,)")
    }
}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
    archiveClassifier = 'slim'
    manifest {
        attributes([
                "Specification-Title"     : "iguanatweaksreborn",
                "Specification-Vendor"    : "Insane96MCP",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "Insane96MCP",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "iguanatweaksreborn.mixins.json"
        ])
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}

// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing:
// tasks.named('publish').configure {
//     dependsOn 'reobfJar'
// }

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

shadowJar {
    archiveClassifier = ''
    configurations = [project.configurations.shade]
    relocate 'com.ezylang.EvalEx', "${project.group}.relocated.EvalEx"
    finalizedBy 'reobfShadowJar'
}

assemble.dependsOn shadowJar

reobf {
    shadowJar {}
}